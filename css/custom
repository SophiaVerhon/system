<?php
include('db_connect.php');
$message = "";

session_start();
if (!isset($_SESSION['user_id'])) {
    header("Location: users/login.php");
    exit();
}
$user_id = $_SESSION['user_id'];

if (!isset($_GET['tour_id'])) {
    die("Tour ID not specified. Please go back and select a tour.");
}
$tour_id = $_GET['tour_id'];

// Fetch the tour details including exclusive flag, min_bookings, max_bookings
$tour_query = "SELECT tour_name, max_bookings, min_bookings, is_exclusive, price_per_person FROM tour WHERE tour_id = ?";
$stmt_tour = $conn->prepare($tour_query);
$stmt_tour->bind_param("i", $tour_id);
$stmt_tour->execute();
$stmt_tour->store_result();
$stmt_tour->bind_result($tour_name, $max_bookings, $min_bookings, $isExclusive, $price_per_person);
$stmt_tour->fetch();
$stmt_tour->close();


// For exclusive tours, ensure the form has enough fields for min_bookings
if ($isExclusive && $min_bookings > 0) {
    $num_adventurers = $min_bookings - 1; // Subtract 1 for the main customer
} else {
    $num_adventurers = 0; // No default adventurers for non-exclusive tours
}

// Get current number of bookings for this tour
$booking_count_query = "SELECT COUNT(*) FROM booking WHERE tour_id = ?";
$stmt_booking_count = $conn->prepare($booking_count_query);
$stmt_booking_count->bind_param("i", $tour_id);
$stmt_booking_count->execute();
$stmt_booking_count->bind_result($current_booking_count);
$stmt_booking_count->fetch();
$stmt_booking_count->close();

// Calculate available slots for max bookings (excluding the main customer)
$availableSlots = max(0, $max_bookings - 1 - $current_booking_count);

if ($max_bookings > 0 && $current_booking_count >= $max_bookings) {
    $message = "Sorry, this tour has already reached the maximum number of bookings.";
    exit();
}

if ($max_bookings !== NULL && $max_bookings > 0) {
    // If there are max bookings set, calculate available slots based on the current booking count
    $availableSlots = max(0, $max_bookings - 1 - $current_booking_count);
} else {
    // If no max bookings, set available slots to a large number or "unlimited"
    $availableSlots = PHP_INT_MAX; // This means unlimited slots are available
}

$total_payment = $price_per_person * 0.5;

if ($_SERVER['REQUEST_METHOD'] == 'POST') {
    $conn->begin_transaction();
    try {
        // Collect customer details
        $name = $_POST['name'];
        $email = $_POST['email'];
        $phone = $_POST['phone_no'];
        $age = $_POST['age'];
        $address = $_POST['address'];
        $num_people = $_POST['num_people'];  // This is where you get the number of people
        $start_date = isset($_POST['start_date']) && !empty($_POST['start_date']) ? $_POST['start_date'] : null;
        $end_date = isset($_POST['end_date']) && !empty($_POST['end_date']) ? $_POST['end_date'] : null;
        $valid_id_path = null;

        // Debugging output
        echo "Number of people: $num_people<br>";  // Debugging line
        echo "Exclusive tour flag: $isExclusive<br>";  // Debugging line
        echo "Minimum bookings required: $min_bookings<br>";  // Debugging line
        $price_per_person = floatval($price_per_person);
    $num_people = intval($num_people);
    $amount_paid = floatval($amount_paid);

        // Adjust number of adventurers for exclusive tours
        $isExclusive = $_POST['is_exclusive'];
        $num_people_adjusted = $num_people - 1;
        $amount_paid = $_POST['amount_paid'];

        $totalCost = $price_per_person * $num_people; // Total cost for all participants
$requiredAmount = $totalCost * 0.5;           // 50% of total cost

// Check if the amount paid is less than the required payment
if ($amount_paid < $requiredAmount) {
    $message = "The amount paid is insufficient. You must pay at least 50% of the total cost for all participants.";
    echo "<script>alert('$message');</script>";
    return; // Stop further processing
}

        if ($isExclusive && $num_people_adjusted < $min_bookings) {
            // If the adjusted number of adventurers is less than the minimum required
            $message = "You must have at least $min_bookings adventurers to book this exclusive tour.";
            echo "<script>alert('$message');</script>";
            return;  // Stop further processing if the condition isn't met
        }

        // Handle file upload for the main customer (LONGBLOB storage)
        if (isset($_FILES['valid_id_path']) && $_FILES['valid_id_path']['error'] === UPLOAD_ERR_OK) {
            $file_name = $_FILES['valid_id_path']['name'];
            $file_data = file_get_contents($_FILES['valid_id_path']['tmp_name']);
            $valid_id_path = $file_data; // Store the file's binary data
        }

        // Insert the customer data into the customer table
        $customer_query = "INSERT INTO customer (name, email, phone_no, age, address, valid_id_path, user_id) VALUES (?, ?, ?, ?, ?, ?, ?)";
            $stmt_customer = $conn->prepare($customer_query);
            $stmt_customer->bind_param("sssissi", $name, $email, $phone, $age, $address, $valid_id_path, $user_id);

if ($stmt_customer->execute()) {
    $customer_id = $stmt_customer->insert_id;

    // If this is an exclusive tour, insert the exclusive tour first
    if ($isExclusive) {
        // Validate start_date and end_date for exclusive tours
        if (!empty($_POST['start_date']) && !empty($_POST['end_date'])) {
            // Debugging: Check the assigned PHP variables
            echo "Assigned Start Date: $start_date<br>";
            echo "Assigned End Date: $end_date<br>";
            
            // Insert booking for the exclusive tour with start_date and end_date
            $booking_query = "INSERT INTO booking (customer_id, tour_id, user_id, start_date, end_date, booking_date) 
                              VALUES (?, ?, ?, ?, ?, NOW())";
            $stmt_booking = $conn->prepare($booking_query);
            $stmt_booking->bind_param("iiiss", $customer_id, $tour_id, $user_id, $start_date, $end_date);
        
            if (!$stmt_booking->execute()) {
                throw new Exception("Error adding booking for the exclusive tour: " . $stmt_booking->error);
            }
        } else {
            $message = "Start date and end date must be provided for exclusive tours.";
            echo "<script>alert('$message');</script>";
            return;  // Stop further processing if the dates are not provided
        }
    } else {
        // For non-exclusive tours, set start_date and end_date to null
        $start_date = null;
        $end_date = null;
    
        // Insert booking for the non-exclusive tour (with null start_date and end_date)
        $booking_query = "INSERT INTO booking (customer_id, tour_id, user_id, start_date, end_date, booking_date) 
                          VALUES (?, ?, ?, ?, ?, NOW())";
        $stmt_booking = $conn->prepare($booking_query);
        $stmt_booking->bind_param("iiiss", $customer_id, $tour_id, $user_id, $start_date, $end_date);
    
        if (!$stmt_booking->execute()) {
            error_log("Error executing booking query: " . $stmt_booking->error);
            throw new Exception("Error adding booking for the exclusive tour: " . $stmt_booking->error);
        }
        $booking_id = $stmt_booking->insert_id; // Get the correct booking_id
        
    }
    
    // Collect payment details if provided
    if (isset($_POST['ref_number']) && !empty($_POST['ref_number'])) {
        $reference_no = $_POST['ref_number'];
        $payment_upload = null;
        if (isset($_FILES['payment_upload']) && $_FILES['payment_upload']['error'] === UPLOAD_ERR_OK) {
            $payment_upload = file_get_contents($_FILES['payment_upload']['tmp_name']); // Store the uploaded image
        }

        // Insert payment details into the payment table for the main customer, using booking_id
        $payment_query = "INSERT INTO payment (booking_id, date, reference_no, payment_proof, amount_paid) VALUES (?, NOW(), ?, ?, ?)";
        $stmt_payment = $conn->prepare($payment_query);
        $stmt_payment->bind_param("issi", $booking_id, $reference_no, $payment_upload, $amount_paid);

        if (!$stmt_payment->execute()) {
            throw new Exception("Error adding payment details for main customer.");
        }

    }

    $notification_message = "New Booking: $name has booked for $tour_name.";

    // Include the $tour_id in the insert query
    $notification_query = "INSERT INTO notifications (message, tour_id) VALUES (?, ?)";
    $stmt_notification = $conn->prepare($notification_query);
    $stmt_notification->bind_param("si", $notification_message, $tour_id);
    $stmt_notification->execute();

    // Handle additional adventurers
    if (isset($_POST['adventurer_name']) && is_array($_POST['adventurer_name'])) {
        for ($i = 0; $i < count($_POST['adventurer_name']); $i++) {
            $adventurer_payment = $price_per_person * 0.5;
            // Check if adding this adventurer exceeds the max booking limit
            if ($totalAdventurers + 1 > $availableSlots) {  // +1 for the main customer
                throw new Exception("You cannot add more adventurers than available slots.");
            }

            $additional_name = $_POST['adventurer_name'][$i];
            $additional_email = $_POST['adventurer_emails'][$i];
            $additional_phone = $_POST['adventurer_phones'][$i];
            $additional_age = $_POST['adventurer_ages'][$i];
            $additional_address = $_POST['adventurer_address'][$i];
            $additional_valid_id = null;

            if (isset($_FILES['adventurer_valid_id']) && $_FILES['adventurer_valid_id']['error'][$i] === UPLOAD_ERR_OK) {
                $file_data = file_get_contents($_FILES['adventurer_valid_id']['tmp_name'][$i]);
                $additional_valid_id = $file_data;
            }

            // Insert additional adventurer
            $stmt_additional = $conn->prepare("INSERT INTO customer (name, email, phone_no, age, address, valid_id_path, user_id) VALUES (?, ?, ?, ?, ?, ?, ?)");
            $stmt_additional->bind_param("sssissi", $additional_name, $additional_email, $additional_phone, $additional_age, $additional_address, $additional_valid_id, $user_id);

            if ($stmt_additional->execute()) {
                $additional_customer_id = $stmt_additional->insert_id;

                // Insert booking for the adventurer
                $stmt_additional_booking = $conn->prepare("INSERT INTO booking (customer_id, tour_id, user_id, booking_date) VALUES (?, ?, ?, NOW())");
                $stmt_additional_booking->bind_param("iii", $additional_customer_id, $tour_id, $user_id);

                if (!$stmt_additional_booking->execute()) {
                    throw new Exception("Error adding booking for adventurer $additional_name.");
                }
                $additional_booking_id = $stmt_additional_booking->insert_id; // Get the correct booking_id for adventurer
                $payment_per_adventurer = $payment_per_person;

                // Insert payment for the adventurer, using the correct booking_id
                $stmt_adventurer_payment = $conn->prepare("INSERT INTO payment (booking_id, date, reference_no, payment_proof, amount_paid) VALUES (?, NOW(), ?, ?, ?)");
                $stmt_adventurer_payment->bind_param("issi", $additional_booking_id, $reference_no, $payment_upload, $amount_paid);
                $stmt_adventurer_payment->execute();

                // Update the booking count after adding an adventurer
                $current_booking_count++;
            } else {
                throw new Exception("Error adding adventurer: " . $stmt_additional->error);
            }

            $notification_message = "New Booking: $additional_name has booked for $tour_name.";

            // Include the $tour_id in the insert query
            $notification_query = "INSERT INTO notifications (message, tour_id) VALUES (?, ?)";
            $stmt_notification = $conn->prepare($notification_query);
            $stmt_notification->bind_param("si", $notification_message, $tour_id);
            $stmt_notification->execute();
        }
    }

            $conn->commit();
            header("Location: users/home.php");
            exit();
        } else {
            throw new Exception("Error adding main customer: " . $stmt_customer->error);
        }
    } catch (Exception $e) {
        $conn->rollback();
        $message = $e->getMessage();
    }
    echo "<script>var minBookings = $min_bookings;</script>";
    $num_adventurers = ($isExclusive && $min_bookings > 0) ? $min_bookings : 0; // Default to min_bookings for exclusive tours
    $availableSlots = $max_bookings - 1;
}

$conn->close();
?>






<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="stylesheet" href="css/customer_formstyle.css">
  <link rel="stylesheet" href="css/amountmodal.css">

  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css"
        integrity="sha512-DTOQO9RWCH3ppGqcWaEA1BIZOC6xxalwEsw9c2QQeAIftl+Vegovlnee1c9QX4TctnWMn13TZye+giMm8e2LwA=="
        crossorigin="anonymous" referrerpolicy="no-referrer" />
  <title>Booking</title>
</head>

<body>


<header class="TOURmain-header">
  <div class="TOURheader-logo-text">
    <img src="image/logo.png" alt="Logo" class="TOURlogo-image">
    <span class="TOURheader-text">Higanteng Laagan Travel & Tours</span>
  </div>
  <nav class="TOURheader-navHP">
    <a href="users/home.php "class="TOURnav-linkHP">GO BACK TO HOMEPAGE</a>
    <div class="TOURdropdown">
      <span class="TOURnav-linkHP dropdown-toggle" onclick="toggleDropdown()">MY PROFILE</span>
      <div id="profile-dropdown" class="TOURdropdown-menu">
        <a href="users/profile.php" class="TOURdropdown-item">My Account</a>
        <a href="users/bkstatus.php" class="TOURdropdown-item">Booking Status</a>
        <a href="users/index.php" class="TOURdropdown-item">Log Out</a>
      </div>
    </div>
  </nav>
</header>

<section>
    <div class="logincreateform-box">
        <div class="logincreateform-value">
        <form action="customer_form.php?tour_id=<?php echo htmlspecialchars($tour_id); ?>" method="POST" enctype="multipart/form-data">
                <h2 class="logincreateh2">Booking Form</h2>

                <div class="input-row">
                    <div class="inputbox">
                        <label for="name">Name:</label>
                        <input type="text" id="name" name="name" required>
                    </div>
                    <div class="inputbox">
                        <label for="email">Email:</label>
                        <input type="email" id="email" name="email" required>
                    </div>
                </div>

                <div class="input-row">
                    <div class="inputbox">
                        <label for="phone_no">Phone Number:</label>
                        <input type="tel" id="phone_no" name="phone_no" required>
                    </div>
                    <div class="inputbox">
                        <label for="age">Age:</label>
                        <input type="number" id="age" name="age" required>
                    </div>
                </div>

                <div class="input-row">
                    <div class="inputbox">
                        <label for="address">Address:</label>
                        <input type="text" id="address" name="address" required>
                    </div>
                    <div class="inputbox">
                        <label for="valid_id_path">Valid ID for Customer:</label>
                        <input type="file" id="valid_id_path" name="valid_id_path" required>
                    </div>
                </div>
                <div id="date-fields"></div>

                <h2>Adventurers</h2>
                <div class="input-row">
                    <label for="num_people">Number of Adventurers:</label>
                    <input type="number" id="num_people" name="num_people" min="1" value="<?php echo $num_people; ?>">
                </div>

                <div id="adventurer-fields">
                </div>
                <div id="booking-limit-modal" class="modal" style="display: none;">
    <div class="modal-content">
        <span class="close-btn" onclick="closeModal()">×</span>
        <p>Booking limit reached! You cannot add more adventurers.</p>
    </div>
</div>

                <button type="button" class="submit-btn" onclick="togglePaymentSection()">Proceed to Payment</button>
               
<div id="payment-section" class="collapsible-content" style="display: none;">
<div class="scan-image-container">
                    <img src="image/scan.jpg" alt="Payment Instructions" class="container-image">
                </div>
    <div class="inputbox">
        <label for="ref_number">GCASH Reference Number (Required)</label>
        <input type="text" id="ref_number" name="ref_number" required>
    </div>

    <div class="inputbox">
        <label for="payment_upload">Upload Payment Proof (Required)</label>
        <input type="file" id="payment_upload" name="payment_upload" accept="image/*"required>
    </div>

    <div class="inputbox">
    <label for="amount_paid">Amount Paid (Required)</label>
    <input type="number" id="amount_paid" name="amount_paid" required>
    <p>Required Payment: <span id="required-amount"></span></p>
    <p id="insufficient-message" style="color: red; display: none;">Insufficient payment amount! Please enter the correct amount.</p>
</div>

<button type="button" name="book_tour" class="submit-btn" onclick="checkAmount(event)">Book Now</button>

<div id="insufficientModal" class="modal">
    <div class="modal-content">
        <span class="close-btn" onclick="closeModal()">&times;</span>
        <p>Insufficient payment amount! Please enter the correct amount.</p>
        <button type="button" onclick="closeModal()">OK</button> <!-- Button to close the modal -->
    </div>
</div>
</div>
</div>
</div>
    </div>
</section>
<script>
    // Toggle payment section visibility
    function togglePaymentSection() {
        const paymentSection = document.getElementById('payment-section');
        paymentSection.style.display = (paymentSection.style.display === 'none' || paymentSection.style.display === '') ? 'block' : 'none';
    }
</script>
<script>
const pricePerPerson = <?php echo json_encode($price_per_person); ?>; // Price per person from PHP

// Calculate the required amount dynamically
function calculateRequiredAmount(numPeople) {
    return pricePerPerson * numPeople * 0.5; // 50% of total cost for all participants
}

// Prevent form submission if the amount is insufficient
function checkAmount(event) {
    const amountPaid = parseFloat(document.getElementById('amount_paid').value);
    const numPeople = parseInt(document.getElementById('num_people').value) || 1; // Get the number of people
    const requiredAmount = calculateRequiredAmount(numPeople); // Recalculate based on latest inputs

    console.log("Amount paid: ", amountPaid); // Log entered amount
    console.log("Required amount (50% of total): ", requiredAmount); // Log required amount

    // If the payment is insufficient, show the modal and prevent form submission
    if (isNaN(amountPaid) || amountPaid < requiredAmount) {
        console.log("Insufficient payment. Showing modal.");

        // Show error message and modal
        document.getElementById('insufficient-message').style.display = 'block';
        document.getElementById('insufficientModal').style.display = 'block';

        // Prevent form submission
        event.preventDefault();
    } else {
        console.log("Sufficient payment. Proceeding.");

        // Hide error message and modal if sufficient
        document.getElementById('insufficient-message').style.display = 'none';
        document.getElementById('insufficientModal').style.display = 'none';

        // Submit the form if valid
        document.forms[0].submit();
    }
}

// Close the modal (this will be triggered when clicking the "OK" button)
function closeModal() {
    console.log("Closing modal.");
    document.getElementById('insufficientModal').style.display = 'none'; // Hide modal
}

// Update required amount dynamically when the number of participants changes
document.getElementById('num_people').addEventListener('input', function () {
    const numPeople = parseInt(this.value) || 1; // Update the number of participants, default to 1
    console.log("Updated number of participants: ", numPeople); // Debug log

    // Calculate and display the required amount dynamically
    const requiredAmount = calculateRequiredAmount(numPeople);
    console.log("Updated required amount (50%): ", requiredAmount); // Debug log

    // Optionally, you can also display the required amount to the user in real-time (for better UX)
    document.getElementById('required-amount').textContent = requiredAmount.toFixed(2); // Display with 2 decimal places
});

// Ensure the event object is passed to checkAmount() when "Book Now" is clicked
document.querySelector('.submit-btn').addEventListener('click', function(event) {
    checkAmount(event);
});

// Display the required amount immediately when the page loads
document.addEventListener('DOMContentLoaded', function() {
    const numPeople = parseInt(document.getElementById('num_people').value) || 1; // Default to 1 if input is empty
    const requiredAmount = calculateRequiredAmount(numPeople);
    document.getElementById('required-amount').textContent = requiredAmount.toFixed(2); // Display with 2 decimal places
});
</script>


<script>
     document.addEventListener("DOMContentLoaded", function() {
        const isExclusive = <?php echo $isExclusive ? 'true' : 'false'; ?>;
        const exclusiveDatesDiv = document.getElementById('exclusiveDates');
        if (isExclusive) {
            exclusiveDatesDiv.style.display = 'block';
        }
    });
// Fetch the dynamic values from PHP
let numAdventurers = <?php echo $num_adventurers; ?>; // This value is dynamically fetched from the database
let availableSlots = <?php echo $availableSlots; ?>;
let isExclusive = <?php echo $isExclusive; ?>; // Exclusive tour flag

// Set the value of the num_people input field to the default number of adventurers
document.getElementById('num_people').value = numAdventurers; 

// Dynamically add adventurer fields based on the default number of adventurers when the page loads
let adventurerFields = document.getElementById('adventurer-fields');
for (let i = 0; i < numAdventurers; i++) {
    adventurerFields.innerHTML += `
        <h3>Adventurer ${i + 1}</h3>
        <div class="input-row">
            <div class="inputbox">
                <label for="adventurer_name_${i}">Name:</label>
                <input type="text" id="adventurer_name_${i}" name="adventurer_name[]" required>
            </div>
            <div class="inputbox">
                <label for="adventurer_email_${i}">Email:</label>
                <input type="email" id="adventurer_email_${i}" name="adventurer_emails[]" required>
            </div>
        </div>
        <div class="input-row">
            <div class="inputbox">
                <label for="adventurer_phone_${i}">Phone Number:</label>
                <input type="tel" id="adventurer_phone_${i}" name="adventurer_phones[]" required>
            </div>
            <div class="inputbox">
                <label for="adventurer_age_${i}">Age:</label>
                <input type="number" id="adventurer_age_${i}" name="adventurer_ages[]" required>
            </div>
        </div>
        <div class="input-row">
            <div class="inputbox">
                <label for="adventurer_address_${i}">Address:</label>
                <input type="text" id="adventurer_address_${i}" name="adventurer_address[]" required>
            </div>
            <div class="inputbox">
                <label for="adventurer_valid_id_${i}">Valid ID for Adventurer ${i + 1}:</label>
                <input type="file" id="adventurer_valid_id_${i}" name="adventurer_valid_id[]" required>
            </div>
        </div>`;
}

// Dynamically show start and end dates if the tour is exclusive
if (isExclusive) {
    let dateFields = document.getElementById('date-fields');
    dateFields.innerHTML = `
        <h3>Tour Dates (Exclusive Tour)</h3>
        <div class="input-row">
            <div class="inputbox">
                <label for="start_date">Start Date:</label>
                <input type="date" id="start_date" name="start_date" required>
            </div>
            <div class="inputbox">
                <label for="end_date">End Date:</label>
                <input type="date" id="end_date" name="end_date" required>
            </div>
        </div>`;
}

// Update the adventurer fields dynamically when the num_people input changes
document.getElementById('num_people').addEventListener('input', function() {
    let numPeople = this.value; // Get the number of people from the input field
    adventurerFields.innerHTML = ''; // Clear previous fields

    // Check if the number of people exceeds the available slots
    if (numPeople > availableSlots) {
        alert("You cannot add more adventurers than available slots!");
        return; // Stop adding fields if the max bookings are exceeded
    }

    // Check if the number of people is less than the min_bookings for exclusive tours
    if (numPeople < <?php echo ($isExclusive && $min_bookings > 0) ? $min_bookings : 0; ?>) {
        alert("You must have at least <?php echo $min_bookings; ?> adventurers for this exclusive tour.");
        return; // Prevent updating the fields if the number is less than min_bookings
    }

    // Add the adventurer fields dynamically based on the updated number of people
    for (let i = 0; i < numPeople; i++) {
        adventurerFields.innerHTML += `
            <h3>Adventurer ${i + 1}</h3>
            <div class="input-row">
                <div class="inputbox">
                    <label for="adventurer_name_${i}">Name:</label>
                    <input type="text" id="adventurer_name_${i}" name="adventurer_name[]" required>
                </div>
                <div class="inputbox">
                    <label for="adventurer_email_${i}">Email:</label>
                    <input type="email" id="adventurer_email_${i}" name="adventurer_emails[]" required>
                </div>
            </div>
            <div class="input-row">
                <div class="inputbox">
                    <label for="adventurer_phone_${i}">Phone Number:</label>
                    <input type="tel" id="adventurer_phone_${i}" name="adventurer_phones[]" required>
                </div>
                <div class="inputbox">
                    <label for="adventurer_age_${i}">Age:</label>
                    <input type="number" id="adventurer_age_${i}" name="adventurer_ages[]" required>
                </div>
            </div>
            <div class="input-row">
                <div class="inputbox">
                    <label for="adventurer_address_${i}">Address:</label>
                    <input type="text" id="adventurer_address_${i}" name="adventurer_address[]" required>
                </div>
                <div class="inputbox">
                    <label for="adventurer_valid_id_${i}">Valid ID for Adventurer ${i + 1}:</label>
                    <input type="file" id="adventurer_valid_id_${i}" name="adventurer_valid_id[]" required>
                </div>
            </div>`;
    }

    // Update the hidden input for the number of adventurers (if needed)
    document.getElementById('num_people').value = numPeople; // Ensure the hidden field reflects the number of adventurers
});
</script>
</body>
</html>
